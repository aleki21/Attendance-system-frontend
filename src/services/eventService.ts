import api from './authService';

export interface Event {
  eventId: number;
  name: string;
  eventType: 'sunday_service' | 'custom';
  date: string;
  autoGenerated: boolean;
  createdBy?: number;
  createdAt: string;
}

export interface CreateEventData {
  name: string;
  eventType: 'sunday_service' | 'custom';
  date: string;
}

export interface EventsResponse {
  events: Event[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    pages: number;
  };
}

export const eventService = {
  // Get all events
  async getEvents(params?: {
    type?: string;
    startDate?: string;
    endDate?: string;
    page?: number;
    limit?: number;
  }): Promise<EventsResponse> {
    const response = await api.get<EventsResponse>('/events', { params });
    return response.data;
  },

  // Get events with date range for calendar
  async getEventsWithRange(startDate: string, endDate: string): Promise<EventsResponse> {
    const response = await api.get<EventsResponse>('/events', {
      params: {
        startDate,
        endDate,
        limit: 100
      }
    });
    return response.data;
  },

  // Get today's events
  async getTodayEvents(): Promise<{ events: Event[] }> {
    const response = await api.get<{ events: Event[] }>('/events/today');
    return response.data;
  },

  // Get upcoming events
  async getUpcomingEvents(): Promise<{ events: Event[] }> {
    const response = await api.get<{ events: Event[] }>('/events/upcoming');
    return response.data;
  },

  // Create event
  async createEvent(eventData: CreateEventData): Promise<{ message: string; event: Event }> {
    const response = await api.post<{ message: string; event: Event }>('/events', eventData);
    return response.data;
  },

  // Generate Sunday services (backup/manual)
  async generateSundayServices(weeks: number = 4): Promise<{ message: string; events: Event[] }> {
    const response = await api.post<{ message: string; events: Event[] }>('/events/generate-sundays', { weeks });
    return response.data;
  },

  // Manual Sunday check trigger
  async triggerSundayCheck(): Promise<{ created: boolean; reason: string; event?: Event }> {
    const response = await api.post<{ created: boolean; reason: string; event?: Event }>('/events/trigger-sunday-check');
    return response.data;
  },
  
  // Delete event
  async deleteEvent(eventId: number): Promise<{ message: string }> {
    const response = await api.delete<{ message: string }>(`/events/${eventId}`);
    return response.data;
  },
};