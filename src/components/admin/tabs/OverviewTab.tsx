import React from 'react';
import { Calendar, UserCheck, Shield } from 'lucide-react';
import type { Member } from '../../../services/memberService';
import type { Event } from '../../../services/eventService';
import type { TodayStats } from '../../../services/attendanceService';
import type { User as SystemUser } from '../../../services/userService';

interface OverviewTabProps {
  isMobile: boolean;
  recentMembers: Member[];
  upcomingEvents: Event[];
  todayEvents: Event[];
  todayStats: TodayStats[];
  activeUshers: SystemUser[];
}

const OverviewTab: React.FC<OverviewTabProps> = ({
  isMobile,
  recentMembers,
  upcomingEvents,
  todayEvents,
  todayStats,
  activeUshers
}) => {
  // Get today's date in Kenya time (UTC+3)
  const getTodayInKenya = () => {
    const now = new Date();
    const kenyaTime = new Date(now.getTime() + (3 * 60 * 60 * 1000));
    return kenyaTime;
  };

  const today = getTodayInKenya();

  return (
    <div className="space-y-6">
      {/* Today's Overview Card */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Today's Overview</h3>
          <p className="text-gray-500 text-sm mt-1">
            {today.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })} ðŸ‡°ðŸ‡ª
          </p>
        </div>
        <div className="p-4">
          <div className={`grid gap-4 ${isMobile ? 'grid-cols-1' : 'grid-cols-1 md:grid-cols-3'}`}>
            {/* Today's Event Card */}
            <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl border border-blue-200">
              <Calendar className="h-6 w-6 text-blue-600 mb-2" />
              <h4 className="font-semibold text-blue-800 text-sm">Today's Event</h4>
              {todayEvents.length > 0 ? (
                <div>
                  <p className="text-blue-600 mt-1 font-medium text-sm">
                    {todayEvents[0].name}
                  </p>
                  <div className="flex items-center space-x-2 mt-2">
                    <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                      todayEvents[0].eventType === 'sunday_service' 
                        ? 'bg-blue-100 text-blue-800' 
                        : 'bg-green-100 text-green-800'
                    }`}>
                      {todayEvents[0].eventType === 'sunday_service' ? 'Sunday' : 'Custom'}
                    </span>
                    {todayEvents[0].autoGenerated && (
                      <span className="px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full">
                        Auto
                      </span>
                    )}
                  </div>
                </div>
              ) : (
                <p className="text-blue-600 mt-1 font-medium text-sm">
                  No events today
                </p>
              )}
            </div>

            {/* Attendance Progress Card */}
            <div className="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl border border-green-200">
              <UserCheck className="h-6 w-6 text-green-600 mb-2" />
              <h4 className="font-semibold text-green-800 text-sm">Attendance Progress</h4>
              <p className="text-green-600 mt-1 font-medium text-sm">
                {todayStats.length > 0 && todayStats[0].totalMembers
                  ? `${todayStats[0].presentCount || 0}/${todayStats[0].totalMembers} (${Math.round(((todayStats[0].presentCount || 0) / todayStats[0].totalMembers) * 100)}%)`
                  : 'No data'
                }
              </p>
            </div>

            {/* Active Ushers Card */}
            <div className="bg-gradient-to-br from-orange-50 to-orange-100 p-4 rounded-xl border border-orange-200">
              <Shield className="h-6 w-6 text-orange-600 mb-2" />
              <h4 className="font-semibold text-orange-800 text-sm">Active Ushers</h4>
              <p className="text-orange-600 mt-1 font-medium text-sm">{activeUshers.length} online</p>
            </div>
          </div>
        </div>
      </div>

      <div className={`grid gap-6 ${isMobile ? 'grid-cols-1' : 'grid-cols-1 lg:grid-cols-2'}`}>
        {/* Recent Activity */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
          <div className="p-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">Recent Registrations</h3>
          </div>
          <div className="p-4">
            <div className="space-y-3">
              {recentMembers.map((member) => (
                <div key={member.memberId} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center text-white font-semibold text-xs">
                      {member.name.charAt(0).toUpperCase()}
                    </div>
                    <div className="min-w-0 flex-1">
                      <h4 className="text-sm font-medium text-gray-900 truncate">{member.name}</h4>
                      <p className="text-xs text-gray-500 capitalize truncate">
                        {member.ageGroup} â€¢ {member.gender}
                      </p>
                    </div>
                  </div>
                  <span className="text-xs text-gray-400 flex-shrink-0">
                    {new Date(member.createdAt).toLocaleDateString()}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Upcoming Events */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
          <div className="p-4 border-b border-gray-200">
            <h3 className="text-lg font-semibold text-gray-900">Upcoming Events</h3>
          </div>
          <div className="p-4">
            <div className="space-y-3">
              {upcomingEvents.slice(0, 3).map((event) => (
                <div key={event.eventId} className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <Calendar className="h-5 w-5 text-blue-600 mr-3 flex-shrink-0" />
                  <div className="min-w-0 flex-1">
                    <h4 className="text-sm font-medium text-gray-900 truncate">{event.name}</h4>
                    <p className="text-xs text-gray-500 truncate">
                      {new Date(event.date).toLocaleDateString()} â€¢ {event.eventType.replace('_', ' ')}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OverviewTab;