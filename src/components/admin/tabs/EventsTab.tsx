import React, { useState, useEffect } from 'react';
import { Calendar, Plus, Eye, Edit, Trash2 } from 'lucide-react';
import type { Event } from '../../../services/eventService';
import EventCalendar from '../../Calendar';
import { eventService } from '../../../services/eventService';

interface EventsTabProps {
  isMobile: boolean;
  upcomingEvents: Event[];
  onAddEvent: () => void;
  onEditEvent: (event: Event) => void;
  onViewAttendance: (event: Event) => void;
  onDeleteEvent: (eventId: number) => Promise<void>;
  onGenerateSundays: () => Promise<void>;
}

const EventsTab: React.FC<EventsTabProps> = ({
  isMobile,
  upcomingEvents,
  onAddEvent,
  onEditEvent,
  onViewAttendance,
  onDeleteEvent,
  onGenerateSundays
}) => {
  const [allEvents, setAllEvents] = useState<Event[]>([]);
  const [calendarLoading, setCalendarLoading] = useState(false);

  useEffect(() => {
    loadCalendarEvents();
  }, []);

  const loadCalendarEvents = async () => {
    try {
      setCalendarLoading(true);
      const startDate = new Date();
      startDate.setFullYear(startDate.getFullYear() - 1);
      
      const endDate = new Date();
      endDate.setMonth(endDate.getMonth() + 6);
      
      const eventsData = await eventService.getEvents({
        startDate: startDate.toISOString().split('T')[0],
        endDate: endDate.toISOString().split('T')[0],
        limit: 200
      });
      
      setAllEvents(eventsData.events);
    } catch (error) {
      console.error('Failed to load calendar events:', error);
    } finally {
      setCalendarLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div className="p-4 border-b border-gray-200">
          <div className="flex flex-col space-y-4">
            <div className="flex-1 min-w-0">
              <h3 className="text-lg font-semibold text-gray-900">Event Management</h3>
              <p className="text-gray-500 text-sm mt-1">Manage church events and schedules</p>
            </div>
            <div className="flex flex-col sm:flex-row gap-3 w-full">
              <button 
                onClick={onGenerateSundays}
                className="bg-gradient-to-br from-purple-500 to-purple-600 text-white px-4 py-2 rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all duration-200 flex items-center justify-center font-medium shadow-lg shadow-purple-500/25 whitespace-nowrap min-h-[44px]"
              >
                <Calendar className="h-4 w-4 mr-2" />
                Generate Sundays
              </button>
              <button 
                onClick={onAddEvent}
                className="bg-gradient-to-br from-blue-500 to-blue-600 text-white px-4 py-2 rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center justify-center font-medium shadow-lg shadow-blue-500/25 whitespace-nowrap min-h-[44px]"
              >
                <Plus className="h-4 w-4 mr-2" />
                Create Event
              </button>
            </div>
          </div>
        </div>
        
        <div className="p-4">
          <div className="space-y-4">
            {upcomingEvents.length > 0 ? (
              upcomingEvents.map((event) => (
                <div key={event.eventId} className="flex flex-col p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-all duration-200 bg-white gap-3">
                  <div className="flex items-center space-x-3">
                    <Calendar className="h-8 w-8 text-blue-600 flex-shrink-0" />
                    <div className="min-w-0 flex-1">
                      <h4 className="text-base font-semibold text-gray-900 truncate">{event.name}</h4>
                      <p className="text-sm text-gray-500">
                        {new Date(event.date).toLocaleDateString('en-US', { 
                          weekday: 'short', 
                          month: 'short', 
                          day: 'numeric' 
                        })}
                      </p>
                      <div className="flex items-center space-x-2 mt-1">
                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                          event.eventType === 'sunday_service' 
                            ? 'bg-blue-100 text-blue-800' 
                            : 'bg-green-100 text-green-800'
                        }`}>
                          {event.eventType === 'sunday_service' ? 'Sunday' : 'Custom'}
                        </span>
                        {event.autoGenerated && (
                          <span className="px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full font-medium">
                            Auto
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="flex flex-col sm:flex-row gap-2">
                    <button 
                      onClick={() => onViewAttendance(event)}
                      className="bg-blue-600 text-white px-3 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center font-medium whitespace-nowrap text-sm min-h-[44px] flex-1"
                    >
                      <Eye className="h-3 w-3 mr-1" />
                      Attendance
                    </button>
                    <button 
                      onClick={() => onEditEvent(event)}
                      className="bg-gray-600 text-white px-3 py-2 rounded-lg hover:bg-gray-700 transition-colors flex items-center justify-center font-medium whitespace-nowrap text-sm min-h-[44px] flex-1"
                    >
                      <Edit className="h-3 w-3 mr-1" />
                      Edit
                    </button>
                    <button 
                      onClick={() => onDeleteEvent(event.eventId)}
                      className="bg-red-600 text-white px-3 py-2 rounded-lg hover:bg-red-700 transition-colors flex items-center justify-center font-medium whitespace-nowrap text-sm min-h-[44px] flex-1"
                    >
                      <Trash2 className="h-3 w-3 mr-1" />
                      Delete
                    </button>
                  </div>
                </div>
              ))
            ) : (
              <div className="text-center py-8">
                <Calendar className="h-12 w-12 text-gray-300 mx-auto mb-3" />
                <h3 className="text-base font-medium text-gray-900 mb-1">No Events Found</h3>
                <p className="text-gray-500 text-sm mb-4">Create your first event to get started.</p>
                <div className="flex flex-col sm:flex-row gap-3 justify-center">
                  <button 
                    onClick={onGenerateSundays}
                    className="bg-gradient-to-br from-purple-500 to-purple-600 text-white px-4 py-2 rounded-lg hover:from-purple-600 hover:to-purple-700 transition-all duration-200 flex items-center justify-center font-medium shadow-lg shadow-purple-500/25 min-h-[44px]"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    Generate Sundays
                  </button>
                  <button 
                    onClick={onAddEvent}
                    className="bg-gradient-to-br from-blue-500 to-blue-600 text-white px-4 py-2 rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center justify-center font-medium shadow-lg shadow-blue-500/25 min-h-[44px]"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Create Event
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Calendar Section */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Event Calendar</h3>
          <p className="text-gray-500 text-sm mt-1">View all events in calendar format</p>
        </div>
        <div className="p-2 sm:p-4">
          {calendarLoading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-3"></div>
              <p className="text-gray-600 text-sm">Loading calendar events...</p>
            </div>
          ) : (
            <div className={isMobile ? "mobile-calendar-container" : ""}>
              <EventCalendar events={allEvents} isMobile={isMobile} />
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default EventsTab;